from aiogram.types import Message, CallbackQuery, InaccessibleMessage, User
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram import Router

from src.callbacks.WeatherCallback import WeatherCallback  # CALLBACK

from src.services.UserDataService import user_data_service
from src.services.WeatherService import WeatherService  # API # TODO
from src.services.GeocodingOMAPI import GeocodingOMAPI  # API


from src.keyboards.k_weather import get_inl_btns_weather  # BTN
from src.keyboards.k_start import get_inl_btns_start  # BTN
from src.keyboards.k_device import get_inl_btns_device  # BTN
from src.core.Logging import get_logger
from src.config.TextMessages import get_message


router = Router()
_lg = get_logger()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü–æ–≥–æ–¥–∞
@router.callback_query(WeatherCallback.filter())
async def weather_callback_handler(
    callback: CallbackQuery, callback_data: WeatherCallback, state: FSMContext
):

    # load_msg = WeatherService.get_loading_message()
    # _lg.debug(f"load_message {load_msg}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if isinstance(callback.message, InaccessibleMessage):
        _lg.warning("Cannot edit inaccessible message.")
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å.")
        return

    message: Message | None = callback.message
    user: User | None = callback.from_user

    # üìö –í—ã–∑–æ–≤ –≤—Å–µ–≥–æ –º–µ–Ω—é
    if callback_data.action == "weather_menu":

        await message.edit_text(
            text=get_message("RU_LN")["weather_m"]["message"],
            reply_markup=get_inl_btns_weather(),
        )

    # üå° –°–µ–π—á–∞—Å
    if callback_data.action == "weather_now":

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ
        if not user_data_service.user_has_location(user.id):
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é")
            return

        await WeatherService.get_weather_now()

    # üìä –ü–æ—á–∞—Å–æ–≤–æ–π
    if callback_data.action == "weather_hours":
        await WeatherService.get_weather_hours()

    # üìÜ –ù–∞ 5 –¥–Ω–µ–π
    if callback_data.action == "weather_5d":
        await WeatherService.get_weather_5d()

    # üåÖ –£—Ç—Ä–æ / üåá –í–µ—á–µ—Ä
    if callback_data.action == "weather_day_night":
        await WeatherService.get_weather_day_night()

    # üå¶ –û—Å–∞–¥–∫–∏
    if callback_data.action == "weather_rain":
        await WeatherService.get_weather_rain()

    # üß≠ –í–µ—Ç–µ—Ä/–¥–∞–≤–ª–µ–Ω–∏–µ
    if callback_data.action == "weather_wind_pressure":
        await WeatherService.get_weather_wind_pressure()

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
    if callback_data.action == "weather_settings":
        pass

    # –§—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Ç–æ–º
    # üîî –ü–æ–¥–ø–∏—Å–∫–∞
    if callback_data.action == "weather_subscription":
        pass

    # üìç –õ–æ–∫–∞—Ü–∏—è:
    if callback_data.action == "weather_location":

        if not user_data_service.user_has_location(user.id):
            # –ü–µ—Ä–µ–±—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            await message.answer(
                text=get_message("RU_LN")["device_m"]["message"],
                reply_markup=get_inl_btns_device(),
            )
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            location_display = user_data_service.format_user_location(user.id)
            await message.answer(
                f"{get_message("RU_LN")["location_m"]["message_current_loc"]}{location_display}"
            )

    # üîô –ù–∞–∑–∞–¥
    if callback_data.action == "weather_get_back":

        full_name_user = callback.from_user.full_name

        main_menu_text = f"""{get_message("RU_LN")["start_m"]["message_hello"]}<b>{full_name_user or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</b>{get_message("RU_LN")["start_m"]["message_main_menu"]}"""
        _lg.debug(f"{main_menu_text}")

        await message.edit_text(
            text=main_menu_text,
            reply_markup=get_inl_btns_start(),
        )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather_menu
@router.message(Command("weather_menu"))
async def command_weather_handler(message: Message):

    await message.answer(
        text=get_message("RU_LN")["weather_m"]["message"],
        reply_markup=get_inl_btns_weather(),
    )
